geom_errorbar(aes(ymin = CI_low, ymax = CI_high), width = 0.2, color = "blue") +
coord_flip() +
labs(
title = "Posterior Estimates for Closure - Simulated",
x = "Parameter",
y = "Inverse Transformed Estimate"
) +
theme_cowplot() +
theme(plot.title = element_text(hjust = 0.5)) # Center title
## Posterior predictive check
pp_check(fit, ndraws = 50, type = "dens_overlay") +
ggtitle("Posterior Predictive Check - Simulated data") +
theme_cowplot()
# Convert to a dataframe for plotting
coef_df <- data.frame(
Parameter = rownames(fixed_effects),
Estimate = fixed_effects[, "Estimate"],
CI_low = fixed_effects[, "Q2.5"],
CI_high = fixed_effects[, "Q97.5"]
)
## Inverse the dataframe to get interpretable values
## Therefore, add values from intercept to the estimates ### CHECK THIS INTERPRETABILITY OR NOT
coef_df <- coef_df %>%
mutate(Estimate = 1 / Estimate,
CI_low = 1 / CI_low,
CI_high = 1 / CI_high)
# Filter for intercept and closure parameters
coef_df_filtered <- coef_df %>%
filter(Parameter %in% c("Intercept", "closurescrewtop")) # Replace "Closure" with the actual parameter name if needed
# Plot filtered parameters
ggplot(coef_df_filtered, aes(x = Parameter, y = Estimate)) +
geom_point(size = 3, color = "blue") + # Larger points for emphasis
geom_errorbar(aes(ymin = CI_low, ymax = CI_high), width = 0.2, color = "blue") +
coord_flip() +
labs(
title = "Posterior Estimates for Closure - Simulated",
x = "Parameter",
y = "Inverse Transformed Estimate"
) +
theme_cowplot() +
theme(plot.title = element_text(hjust = 0.5)) # Center title
## Posterior predictive check
pp_check(fit, ndraws = 50, type = "dens_overlay") +
ggtitle("Posterior Predictive Check - Simulated data")
#theme_cowplot()
# Convert to a dataframe for plotting
coef_df <- data.frame(
Parameter = rownames(fixed_effects),
Estimate = fixed_effects[, "Estimate"],
CI_low = fixed_effects[, "Q2.5"],
CI_high = fixed_effects[, "Q97.5"]
)
## Inverse the dataframe to get interpretable values
## Therefore, add values from intercept to the estimates ### CHECK THIS INTERPRETABILITY OR NOT
coef_df <- coef_df %>%
mutate(Estimate = 1 / Estimate,
CI_low = 1 / CI_low,
CI_high = 1 / CI_high)
# Filter for intercept and closure parameters
coef_df_filtered <- coef_df %>%
filter(Parameter %in% c("Intercept", "closurescrewtop")) # Replace "Closure" with the actual parameter name if needed
# Plot filtered parameters
ggplot(coef_df_filtered, aes(x = Parameter, y = Estimate)) +
geom_point(size = 3, color = "blue") + # Larger points for emphasis
geom_errorbar(aes(ymin = CI_low, ymax = CI_high), width = 0.2, color = "blue") +
coord_flip() +
labs(
title = "Posterior Estimates for Closure - Simulated",
x = "Parameter",
y = "Inverse Transformed Estimate"
) +
theme_cowplot() +
theme(plot.title = element_text(hjust = 0.5)) # Center title
## Posterior predictive check
pp_check(fit, ndraws = 50, type = "dens_overlay") +
ggtitle("Posterior Predictive Check - Simulated data") +
theme_cowplot()
data_filt <- d_filt %>% select(Price, Closure, Grape, Country)
## Running with real data
formula <- bf(Price ~ Closure + Grape + Country, family = Gamma())
# Define priors for the model
priors <- c(
prior(normal(0, 2), class = "b", lb = 0),     # Lower bound of 0
prior(normal(0, 2), class = "Intercept", lb = 0)
)
# Fit the Bayesian model
fit_d <- brm(
formula = formula,
data = data_filt,
prior = priors,
iter = 8000, warmup = 4000, chains = 8, cores = 8
)
# Print a summary of the model
summary(fit_d)
# Get the fixed effects
fixed_effects_d <- fixef(fit_d)
# Convert to a dataframe for plotting
coef_df_d <- data.frame(
Parameter = rownames(fixed_effects_d),
Estimate = fixed_effects_d[, "Estimate"],
CI_low = fixed_effects_d[, "Q2.5"],
CI_high = fixed_effects_d[, "Q97.5"]
)
## Inverse the dataframe to get interpretable values
coef_df_d <- coef_df_d %>%
mutate(Estimate = 1 / Estimate,
CI_low = 1 / CI_low,
CI_high = 1 / CI_high)
coef_df_d <- coef_df_d %>%
mutate(Estimate = 1 / Estimate,
CI_low = 1 / CI_low,
CI_high = 1 / CI_high)
# Filter for intercept and closure parameters
coef_df_filtered_d <- coef_df_d %>%
filter(Parameter %in% c("Intercept", "ClosureScrewcap")) # Replace "Closure" with the actual parameter name if needed
# Plot filtered parameters
ggplot(coef_df_filtered_d, aes(x = Parameter, y = Estimate)) +
geom_point(size = 3, color = "blue") + # Larger points for emphasis
geom_errorbar(aes(ymin = CI_low, ymax = CI_high), width = 0.2, color = "blue") +
coord_flip() +
labs(
title = "Posterior Estimates for Closure - Simulated",
x = "Parameter",
y = "Inverse Transformed Estimate"
) +
theme_cowplot() +
theme(plot.title = element_text(hjust = 0.5)) # Center title
## Posterior predictive check
pp_check(fit, ndraws = 50, type = "dens_overlay") +
ggtitle("Posterior Predictive Check - Simulated data") +
theme_cowplot()
# Convert to a dataframe for plotting
coef_df_d <- data.frame(
Parameter = rownames(fixed_effects_d),
Estimate = fixed_effects_d[, "Estimate"],
CI_low = fixed_effects_d[, "Q2.5"],
CI_high = fixed_effects_d[, "Q97.5"]
)
## Inverse the dataframe to get interpretable values
coef_df_d <- coef_df_d %>%
mutate(Estimate = 1 / Estimate,
CI_low = 1 / CI_low,
CI_high = 1 / CI_high)
# Filter for intercept and closure parameters
coef_df_filtered_d <- coef_df_d %>%
filter(Parameter %in% c("Intercept", "ClosureScrewcap")) # Replace "Closure" with the actual parameter name if needed
# Plot filtered parameters
ggplot(coef_df_filtered_d, aes(x = Parameter, y = Estimate)) +
geom_point(size = 3, color = "blue") + # Larger points for emphasis
geom_errorbar(aes(ymin = CI_low, ymax = CI_high), width = 0.2, color = "blue") +
coord_flip() +
labs(
title = "Posterior Estimates for Closure - Simulated",
x = "Parameter",
y = "Inverse Transformed Estimate"
) +
theme_cowplot() +
theme(plot.title = element_text(hjust = 0.5)) # Center title
## Posterior predictive check
pp_check(fit, ndraws = 50, type = "dens_overlay") +
ggtitle("Posterior Predictive Check - Simulated data") +
theme_cowplot()
# Convert to a dataframe for plotting
coef_df_d <- data.frame(
Parameter = rownames(fixed_effects_d),
Estimate = fixed_effects_d[, "Estimate"],
CI_low = fixed_effects_d[, "Q2.5"],
CI_high = fixed_effects_d[, "Q97.5"]
)
## Inverse the dataframe to get interpretable values
coef_df_d <- coef_df_d %>%
mutate(Estimate = 1 / Estimate,
CI_low = 1 / CI_low,
CI_high = 1 / CI_high)
# Filter for intercept and closure parameters
coef_df_filtered_d <- coef_df_d %>%
filter(Parameter %in% c("Intercept", "ClosureScrewcap")) # Replace "Closure" with the actual parameter name if needed
# Plot filtered parameters
ggplot(coef_df_filtered_d, aes(x = Parameter, y = Estimate)) +
geom_point(size = 3, color = "blue") + # Larger points for emphasis
geom_errorbar(aes(ymin = CI_low, ymax = CI_high), width = 0.2, color = "blue") +
coord_flip() +
labs(
title = "Posterior Estimates for Closure - On Data",
x = "Parameter",
y = "Inverse Transformed Estimate"
) +
theme_cowplot() +
theme(plot.title = element_text(hjust = 0.5)) # Center title
## Posterior predictive check
pp_check(fit_d, ndraws = 50, type = "dens_overlay") +
ggtitle("Posterior Predictive Check - On Data") +
theme_cowplot()
# Convert to a dataframe for plotting
coef_df_d <- data.frame(
Parameter = rownames(fixed_effects_d),
Estimate = fixed_effects_d[, "Estimate"],
CI_low = fixed_effects_d[, "Q2.5"],
CI_high = fixed_effects_d[, "Q97.5"]
)
## Inverse the dataframe to get interpretable values
coef_df_d <- coef_df_d %>%
mutate(Estimate = 1 / Estimate,
CI_low = 1 / CI_low,
CI_high = 1 / CI_high)
# Filter for intercept and closure parameters
coef_df_filtered_d <- coef_df_d %>%
filter(Parameter %in% c("Intercept", "ClosureScrewcap")) # Replace "Closure" with the actual parameter name if needed
# Plot filtered parameters
ggplot(coef_df_filtered_d, aes(x = Parameter, y = Estimate)) +
geom_point(size = 3, color = "darkolivegreen") + # Larger points for emphasis
geom_errorbar(aes(ymin = CI_low, ymax = CI_high), width = 0.2, color = "darkolivegreen") +
coord_flip() +
labs(
title = "Posterior Estimates for Closure - On Data",
x = "Parameter",
y = "Inverse Transformed Estimate"
) +
theme_cowplot() +
theme(plot.title = element_text(hjust = 0.5)) # Center title
## Posterior predictive check
pp_check(fit_d, ndraws = 50, type = "dens_overlay") +
ggtitle("Posterior Predictive Check - On Data") +
theme_cowplot()
# Convert to a dataframe for plotting
coef_df_d <- data.frame(
Parameter = rownames(fixed_effects_d),
Estimate = fixed_effects_d[, "Estimate"],
CI_low = fixed_effects_d[, "Q2.5"],
CI_high = fixed_effects_d[, "Q97.5"]
)
## Inverse the dataframe to get interpretable values
coef_df_d <- coef_df_d %>%
mutate(Estimate = 1 / Estimate,
CI_low = 1 / CI_low,
CI_high = 1 / CI_high)
# Filter for intercept and closure parameters
coef_df_filtered_d <- coef_df_d %>%
filter(Parameter %in% c("Intercept", "ClosureScrewcap")) # Replace "Closure" with the actual parameter name if needed
# Plot filtered parameters
ggplot(coef_df_filtered_d, aes(x = Parameter, y = Estimate)) +
geom_point(size = 3, color = "orange") + # Larger points for emphasis
geom_errorbar(aes(ymin = CI_low, ymax = CI_high), width = 0.2, color = "orange") +
coord_flip() +
labs(
title = "Posterior Estimates for Closure - On Data",
x = "Parameter",
y = "Inverse Transformed Estimate"
) +
theme_cowplot() +
theme(plot.title = element_text(hjust = 0.5)) # Center title
## Posterior predictive check
pp_check(fit_d, ndraws = 50, type = "dens_overlay") +
ggtitle("Posterior Predictive Check - On Data") +
theme_cowplot()
# Convert to a dataframe for plotting
coef_df_d <- data.frame(
Parameter = rownames(fixed_effects_d),
Estimate = fixed_effects_d[, "Estimate"],
CI_low = fixed_effects_d[, "Q2.5"],
CI_high = fixed_effects_d[, "Q97.5"]
)
## Inverse the dataframe to get interpretable values
coef_df_d <- coef_df_d %>%
mutate(Estimate = 1 / Estimate,
CI_low = 1 / CI_low,
CI_high = 1 / CI_high)
# Filter for intercept and closure parameters
coef_df_filtered_d <- coef_df_d %>%
filter(Parameter %in% c("Intercept", "ClosureScrewcap")) # Replace "Closure" with the actual parameter name if needed
# Plot filtered parameters
ggplot(coef_df_filtered_d, aes(x = Parameter, y = Estimate)) +
geom_point(size = 3, color = "orange") + # Larger points for emphasis
geom_errorbar(aes(ymin = CI_low, ymax = CI_high), width = 0.2, color = "orange") +
coord_flip() +
labs(
title = "Posterior Estimates for Closure - Real Data",
x = "Parameter",
y = "Inverse Transformed Estimate"
) +
theme_cowplot() +
theme(plot.title = element_text(hjust = 0.5)) # Center title
## Posterior predictive check
pp_check(fit_d, ndraws = 50, type = "dens_overlay") +
ggtitle("Posterior Predictive Check - Real Data") +
theme_cowplot()
# Extract coefficients
coefficients <- fixef(fit) # or summary(fit)$coefficients for some models
# Ensure closure variable is correctly encoded
intercept <- coefficients["(Intercept)"]
closure_effect <- coefficients["closure_screwcap"] # Replace with actual variable name
# Calculate relative difference
relative_difference <- exp(closure_effect)
percentage_increase <- (relative_difference - 1) * 100
# Print results
cat("Relative Difference (Cork vs Screw Cap):", relative_difference, "\n")
cat("Percentage Increase:", percentage_increase, "%\n")
# Extract coefficients
coefficients <- fixef(fit) # or summary(fit)$coefficients for some models
# Ensure closure variable is correctly encoded
intercept <- coefficients["(Intercept)"]
closure_effect <- coefficients["ClosureScrewcap"] # Replace with actual variable name
# Calculate relative difference
relative_difference <- exp(closure_effect)
percentage_increase <- (relative_difference - 1) * 100
# Print results
cat("Relative Difference (Cork vs Screw Cap):", relative_difference, "\n")
cat("Percentage Increase:", percentage_increase, "%\n")
# Extract coefficients
coefficients <- fixef(fit) # or summary(fit)$coefficients for some models
# Ensure closure variable is correctly encoded
intercept <- coefficients["Intercept"]
closure_effect <- coefficients["ClosureScrewcap"] # Replace with actual variable name
# Calculate relative difference
relative_difference <- exp(closure_effect)
percentage_increase <- (relative_difference - 1) * 100
# Print results
cat("Relative Difference (Cork vs Screw Cap):", relative_difference, "\n")
cat("Percentage Increase:", percentage_increase, "%\n")
# Extract coefficients
coefficients <- fixef(fit_d) # or summary(fit)$coefficients for some models
# Ensure closure variable is correctly encoded
intercept <- coefficients["Intercept"]
closure_effect <- coefficients["ClosureScrewcap"] # Replace with actual variable name
# Calculate relative difference
relative_difference <- exp(closure_effect)
percentage_increase <- (relative_difference - 1) * 100
# Print results
cat("Relative Difference (Cork vs Screw Cap):", relative_difference, "\n")
cat("Percentage Increase:", percentage_increase, "%\n")
View(coef_df_d)
View(coef_df_filtered_d)
# Extract values from the dataframe
intercept <- coef_df$Estimate[coef_df_filtered_d$Parameter == "Intercept"]
closure_screwcap <- coef_df$Estimate[coef_df_filtered_d$Parameter == "ClosureScrewcap"]
# Calculate relative difference and percentage
relative_difference <- intercept / (intercept - closure_screwcap)
percentage_increase <- (relative_difference - 1) * 100
# Output results
cat("Relative Difference (Cork vs Screw Cap):", relative_difference, "\n")
cat("Percentage Increase:", percentage_increase, "%\n")
View(coef_df_filtered_d)
# Extract values from the dataframe
intercept <- coef_df_filtered_d$Estimate[coef_df_filtered_d$Parameter == "Intercept"]
closure_screwcap <- coef_df_filtered_d$Estimate[coef_df_filtered_d$Parameter == "ClosureScrewcap"]
# Calculate relative difference and percentage
relative_difference <- intercept / (intercept - closure_screwcap)
percentage_increase <- (relative_difference - 1) * 100
# Output results
cat("Relative Difference (Cork vs Screw Cap):", relative_difference, "\n")
cat("Percentage Increase:", percentage_increase, "%\n")
# Convert to a dataframe for plotting
coef_df_d <- data.frame(
Parameter = rownames(fixed_effects_d),
Estimate = fixed_effects_d[, "Estimate"],
CI_low = fixed_effects_d[, "Q2.5"],
CI_high = fixed_effects_d[, "Q97.5"]
)
## Inverse the dataframe to get interpretable values
coef_df_d <- coef_df_d %>%
mutate(Estimate = 1 / Estimate,
CI_low = 1 / CI_low,
CI_high = 1 / CI_high)
# Filter for intercept and closure parameters
coef_df_filtered_d <- coef_df_d %>%
filter(Parameter %in% c("Intercept", "ClosureScrewcap")) # Replace "Closure" with the actual parameter name if needed
# Plot filtered parameters
ggplot(coef_df_filtered_d, aes(x = Parameter, y = Estimate)) +
geom_point(size = 3, color = "orange") + # Larger points for emphasis
geom_errorbar(aes(ymin = CI_low, ymax = CI_high), width = 0.2, color = "orange") +
coord_flip() +
labs(
title = "Posterior Estimates for Closure - Real Data",
x = "Parameter",
y = "Inverse Transformed Estimate"
) +
theme_cowplot() +
theme(plot.title = element_text(hjust = 0.5)) # Center title
## Posterior predictive check
pp_check(fit_d, ndraws = 50, type = "dens_overlay") +
ggtitle("Posterior Predictive Check - Real Data") +
theme_cowplot()
# Extract coefficients
intercept <- coef_df_filtered_d$Estimate[coef_df_filtered_d$Parameter == "Intercept"]
closure_screwcap <- coef_df_filtered_d$Estimate[coef_df_filtered_d$Parameter == "ClosureScrewcap"]
# Calculate adjusted price for screw cap wines
cork_price <- intercept # Baseline for cork
screwcap_price <- intercept - closure_screwcap
# Relative difference and percentage change
relative_effect <- cork_price / screwcap_price
percentage_change <- (relative_effect - 1) * 100
# Output results
cat("Baseline (Cork) Price:", cork_price, "\n")
cat("Adjusted Screw Cap Price:", screwcap_price, "\n")
cat("Relative Effect (Cork vs Screw Cap):", relative_effect, "\n")
cat("Percentage Change:", percentage_change, "%\n")
# Convert to a dataframe for plotting
coef_df_d <- data.frame(
Parameter = rownames(fixed_effects_d),
Estimate = fixed_effects_d[, "Estimate"],
CI_low = fixed_effects_d[, "Q2.5"],
CI_high = fixed_effects_d[, "Q97.5"]
)
## Inverse the dataframe to get interpretable values
coef_df_d <- coef_df_d %>%
mutate(Estimate = 1 / Estimate,
CI_low = 1 / CI_low,
CI_high = 1 / CI_high)
# Filter for intercept and closure parameters
coef_df_filtered_d <- coef_df_d %>%
filter(Parameter %in% c("Intercept", "ClosureScrewcap")) # Replace "Closure" with the actual parameter name if needed
# Plot filtered parameters
ggplot(coef_df_filtered_d, aes(x = Parameter, y = Estimate)) +
geom_point(size = 3, color = "orange") + # Larger points for emphasis
geom_errorbar(aes(ymin = CI_low, ymax = CI_high), width = 0.2, color = "orange") +
coord_flip() +
labs(
title = "Posterior Estimates for Closure - Real Data",
x = "Parameter",
y = "Inverse Transformed Estimate"
) +
theme_cowplot() +
theme(plot.title = element_text(hjust = 0.5)) # Center title
## Posterior predictive check
pp_check(fit_d, ndraws = 50, type = "dens_overlay") +
ggtitle("Posterior Predictive Check - Real Data") +
xlab("Price") +
ylab("Density") +
theme_cowplot()
# Convert to a dataframe for plotting
coef_df <- data.frame(
Parameter = rownames(fixed_effects),
Estimate = fixed_effects[, "Estimate"],
CI_low = fixed_effects[, "Q2.5"],
CI_high = fixed_effects[, "Q97.5"]
)
## Inverse the dataframe to get interpretable values
## Therefore, add values from intercept to the estimates ### CHECK THIS INTERPRETABILITY OR NOT
coef_df <- coef_df %>%
mutate(Estimate = 1 / Estimate,
CI_low = 1 / CI_low,
CI_high = 1 / CI_high)
# Filter for intercept and closure parameters
coef_df_filtered <- coef_df %>%
filter(Parameter %in% c("Intercept", "closurescrewtop")) # Replace "Closure" with the actual parameter name if needed
# Plot filtered parameters
ggplot(coef_df_filtered, aes(x = Parameter, y = Estimate)) +
geom_point(size = 3, color = "blue") + # Larger points for emphasis
geom_errorbar(aes(ymin = CI_low, ymax = CI_high), width = 0.2, color = "blue") +
coord_flip() +
labs(
title = "Posterior Estimates for Closure - Simulated",
x = "Parameter",
y = "Inverse Transformed Estimate"
) +
theme_cowplot() +
theme(plot.title = element_text(hjust = 0.5)) # Center title
## Posterior predictive check
pp_check(fit, ndraws = 50, type = "dens_overlay") +
ggtitle("Posterior Predictive Check - Simulated data") +
xlab("Price") +
ylab("Density") +
theme_cowplot()
```{r}
data_filt <- d_filt %>% select(Price, Closure, Grape, Country)
# Extract coefficients
intercept <- coef_df_filtered$Estimate[coef_df_filtered$Parameter == "Intercept"]
closure_screwcap <- coef_df_filtered$Estimate[coef_df_filtered$Parameter == "ClosureScrewcap"]
# Calculate adjusted price for screw cap wines
cork_price <- intercept # Baseline for cork
screwcap_price <- intercept - closure_screwcap
# Relative difference and percentage change
relative_effect <- cork_price / screwcap_price
percentage_change <- (relative_effect - 1) * 100
# Output results
cat("Baseline (Cork) Price:", cork_price, "\n")
cat("Adjusted Screw Cap Price:", screwcap_price, "\n")
cat("Relative Effect (Cork vs Screw Cap):", relative_effect, "\n")
cat("Percentage Change:", percentage_change, "%\n")
# Extract coefficients
intercept <- coef_df_filtered$Estimate[coef_df_filtered$Parameter == "Intercept"]
closure_screwcap <- coef_df_filtered$Estimate[coef_df_filtered$Parameter == "closurescrewtop"]
# Calculate adjusted price for screw cap wines
cork_price <- intercept # Baseline for cork
screwcap_price <- intercept - closure_screwcap
# Relative difference and percentage change
relative_effect <- cork_price / screwcap_price
percentage_change <- (relative_effect - 1) * 100
# Output results
cat("Baseline (Cork) Price:", cork_price, "\n")
cat("Adjusted Screw Cap Price:", screwcap_price, "\n")
cat("Relative Effect (Cork vs Screw Cap):", relative_effect, "\n")
cat("Percentage Change:", percentage_change, "%\n")
data_filt <- d_filt %>% select(Price, Closure, Grape, Country)
## Running with real data
formula <- bf(Price ~ Closure + Grape + Country, family = Gamma())
# Define priors for the model
priors <- c(
prior(normal(0, 1), class = "b", lb = 0),     # Lower bound of 0
prior(normal(0, 1), class = "Intercept", lb = 0)
)
# Fit the Bayesian model
fit_d <- brm(
formula = formula,
data = data_filt,
prior = priors,
iter = 8000, warmup = 4000, chains = 8, cores = 8
)
# Print a summary of the model
summary(fit_d)
# Get the fixed effects
fixed_effects_d <- fixef(fit_d)
